# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CSF', [dirname(__file__)])
        except ImportError:
            import _CSF
            return _CSF
        if fp is not None:
            try:
                _mod = imp.load_module('_CSF', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CSF = swig_import_helper()
    del swig_import_helper
else:
    import _CSF
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSF.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _CSF.SwigPyIterator_value(self)
    def incr(self, n=1): return _CSF.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _CSF.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _CSF.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _CSF.SwigPyIterator_equal(self, *args)
    def copy(self): return _CSF.SwigPyIterator_copy(self)
    def next(self): return _CSF.SwigPyIterator_next(self)
    def __next__(self): return _CSF.SwigPyIterator___next__(self)
    def previous(self): return _CSF.SwigPyIterator_previous(self)
    def advance(self, *args): return _CSF.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _CSF.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _CSF.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _CSF.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _CSF.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _CSF.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _CSF.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _CSF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _CSF.VecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CSF.VecInt___nonzero__(self)
    def __bool__(self): return _CSF.VecInt___bool__(self)
    def __len__(self): return _CSF.VecInt___len__(self)
    def pop(self): return _CSF.VecInt_pop(self)
    def __getslice__(self, *args): return _CSF.VecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _CSF.VecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _CSF.VecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _CSF.VecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _CSF.VecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _CSF.VecInt___setitem__(self, *args)
    def append(self, *args): return _CSF.VecInt_append(self, *args)
    def empty(self): return _CSF.VecInt_empty(self)
    def size(self): return _CSF.VecInt_size(self)
    def clear(self): return _CSF.VecInt_clear(self)
    def swap(self, *args): return _CSF.VecInt_swap(self, *args)
    def get_allocator(self): return _CSF.VecInt_get_allocator(self)
    def begin(self): return _CSF.VecInt_begin(self)
    def end(self): return _CSF.VecInt_end(self)
    def rbegin(self): return _CSF.VecInt_rbegin(self)
    def rend(self): return _CSF.VecInt_rend(self)
    def pop_back(self): return _CSF.VecInt_pop_back(self)
    def erase(self, *args): return _CSF.VecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _CSF.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CSF.VecInt_push_back(self, *args)
    def front(self): return _CSF.VecInt_front(self)
    def back(self): return _CSF.VecInt_back(self)
    def assign(self, *args): return _CSF.VecInt_assign(self, *args)
    def resize(self, *args): return _CSF.VecInt_resize(self, *args)
    def insert(self, *args): return _CSF.VecInt_insert(self, *args)
    def reserve(self, *args): return _CSF.VecInt_reserve(self, *args)
    def capacity(self): return _CSF.VecInt_capacity(self)
    __swig_destroy__ = _CSF.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _CSF.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _CSF.VecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CSF.VecFloat___nonzero__(self)
    def __bool__(self): return _CSF.VecFloat___bool__(self)
    def __len__(self): return _CSF.VecFloat___len__(self)
    def pop(self): return _CSF.VecFloat_pop(self)
    def __getslice__(self, *args): return _CSF.VecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _CSF.VecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _CSF.VecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _CSF.VecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _CSF.VecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _CSF.VecFloat___setitem__(self, *args)
    def append(self, *args): return _CSF.VecFloat_append(self, *args)
    def empty(self): return _CSF.VecFloat_empty(self)
    def size(self): return _CSF.VecFloat_size(self)
    def clear(self): return _CSF.VecFloat_clear(self)
    def swap(self, *args): return _CSF.VecFloat_swap(self, *args)
    def get_allocator(self): return _CSF.VecFloat_get_allocator(self)
    def begin(self): return _CSF.VecFloat_begin(self)
    def end(self): return _CSF.VecFloat_end(self)
    def rbegin(self): return _CSF.VecFloat_rbegin(self)
    def rend(self): return _CSF.VecFloat_rend(self)
    def pop_back(self): return _CSF.VecFloat_pop_back(self)
    def erase(self, *args): return _CSF.VecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _CSF.new_VecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CSF.VecFloat_push_back(self, *args)
    def front(self): return _CSF.VecFloat_front(self)
    def back(self): return _CSF.VecFloat_back(self)
    def assign(self, *args): return _CSF.VecFloat_assign(self, *args)
    def resize(self, *args): return _CSF.VecFloat_resize(self, *args)
    def insert(self, *args): return _CSF.VecFloat_insert(self, *args)
    def reserve(self, *args): return _CSF.VecFloat_reserve(self, *args)
    def capacity(self): return _CSF.VecFloat_capacity(self)
    __swig_destroy__ = _CSF.delete_VecFloat
    __del__ = lambda self : None;
VecFloat_swigregister = _CSF.VecFloat_swigregister
VecFloat_swigregister(VecFloat)

class VecVecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecFloat, name)
    __repr__ = _swig_repr
    def iterator(self): return _CSF.VecVecFloat_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CSF.VecVecFloat___nonzero__(self)
    def __bool__(self): return _CSF.VecVecFloat___bool__(self)
    def __len__(self): return _CSF.VecVecFloat___len__(self)
    def pop(self): return _CSF.VecVecFloat_pop(self)
    def __getslice__(self, *args): return _CSF.VecVecFloat___getslice__(self, *args)
    def __setslice__(self, *args): return _CSF.VecVecFloat___setslice__(self, *args)
    def __delslice__(self, *args): return _CSF.VecVecFloat___delslice__(self, *args)
    def __delitem__(self, *args): return _CSF.VecVecFloat___delitem__(self, *args)
    def __getitem__(self, *args): return _CSF.VecVecFloat___getitem__(self, *args)
    def __setitem__(self, *args): return _CSF.VecVecFloat___setitem__(self, *args)
    def append(self, *args): return _CSF.VecVecFloat_append(self, *args)
    def empty(self): return _CSF.VecVecFloat_empty(self)
    def size(self): return _CSF.VecVecFloat_size(self)
    def clear(self): return _CSF.VecVecFloat_clear(self)
    def swap(self, *args): return _CSF.VecVecFloat_swap(self, *args)
    def get_allocator(self): return _CSF.VecVecFloat_get_allocator(self)
    def begin(self): return _CSF.VecVecFloat_begin(self)
    def end(self): return _CSF.VecVecFloat_end(self)
    def rbegin(self): return _CSF.VecVecFloat_rbegin(self)
    def rend(self): return _CSF.VecVecFloat_rend(self)
    def pop_back(self): return _CSF.VecVecFloat_pop_back(self)
    def erase(self, *args): return _CSF.VecVecFloat_erase(self, *args)
    def __init__(self, *args): 
        this = _CSF.new_VecVecFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CSF.VecVecFloat_push_back(self, *args)
    def front(self): return _CSF.VecVecFloat_front(self)
    def back(self): return _CSF.VecVecFloat_back(self)
    def assign(self, *args): return _CSF.VecVecFloat_assign(self, *args)
    def resize(self, *args): return _CSF.VecVecFloat_resize(self, *args)
    def insert(self, *args): return _CSF.VecVecFloat_insert(self, *args)
    def reserve(self, *args): return _CSF.VecVecFloat_reserve(self, *args)
    def capacity(self): return _CSF.VecVecFloat_capacity(self)
    __swig_destroy__ = _CSF.delete_VecVecFloat
    __del__ = lambda self : None;
VecVecFloat_swigregister = _CSF.VecVecFloat_swigregister
VecVecFloat_swigregister(VecVecFloat)

class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bSloopSmooth"] = _CSF.Params_bSloopSmooth_set
    __swig_getmethods__["bSloopSmooth"] = _CSF.Params_bSloopSmooth_get
    if _newclass:bSloopSmooth = _swig_property(_CSF.Params_bSloopSmooth_get, _CSF.Params_bSloopSmooth_set)
    __swig_setmethods__["time_step"] = _CSF.Params_time_step_set
    __swig_getmethods__["time_step"] = _CSF.Params_time_step_get
    if _newclass:time_step = _swig_property(_CSF.Params_time_step_get, _CSF.Params_time_step_set)
    __swig_setmethods__["class_threshold"] = _CSF.Params_class_threshold_set
    __swig_getmethods__["class_threshold"] = _CSF.Params_class_threshold_get
    if _newclass:class_threshold = _swig_property(_CSF.Params_class_threshold_get, _CSF.Params_class_threshold_set)
    __swig_setmethods__["cloth_resolution"] = _CSF.Params_cloth_resolution_set
    __swig_getmethods__["cloth_resolution"] = _CSF.Params_cloth_resolution_get
    if _newclass:cloth_resolution = _swig_property(_CSF.Params_cloth_resolution_get, _CSF.Params_cloth_resolution_set)
    __swig_setmethods__["rigidness"] = _CSF.Params_rigidness_set
    __swig_getmethods__["rigidness"] = _CSF.Params_rigidness_get
    if _newclass:rigidness = _swig_property(_CSF.Params_rigidness_get, _CSF.Params_rigidness_set)
    __swig_setmethods__["interations"] = _CSF.Params_interations_set
    __swig_getmethods__["interations"] = _CSF.Params_interations_get
    if _newclass:interations = _swig_property(_CSF.Params_interations_get, _CSF.Params_interations_set)
    def __init__(self): 
        this = _CSF.new_Params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CSF.delete_Params
    __del__ = lambda self : None;
Params_swigregister = _CSF.Params_swigregister
Params_swigregister(Params)

class CSF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CSF.new_CSF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CSF.delete_CSF
    __del__ = lambda self : None;
    def readPointsFromFile(self, *args): return _CSF.CSF_readPointsFromFile(self, *args)
    def getPointCloud(self, *args): return _CSF.CSF_getPointCloud(self, *args)
    def savePoints(self, *args): return _CSF.CSF_savePoints(self, *args)
    def size(self): return _CSF.CSF_size(self)
    def setPointCloud(self, *args): return _CSF.CSF_setPointCloud(self, *args)
    def do_filtering(self, *args): return _CSF.CSF_do_filtering(self, *args)
    __swig_setmethods__["params"] = _CSF.CSF_params_set
    __swig_getmethods__["params"] = _CSF.CSF_params_get
    if _newclass:params = _swig_property(_CSF.CSF_params_get, _CSF.CSF_params_set)
    __swig_setmethods__["index"] = _CSF.CSF_index_set
    __swig_getmethods__["index"] = _CSF.CSF_index_get
    if _newclass:index = _swig_property(_CSF.CSF_index_get, _CSF.CSF_index_set)
CSF_swigregister = _CSF.CSF_swigregister
CSF_swigregister(CSF)

# This file is compatible with both classic and new-style classes.


